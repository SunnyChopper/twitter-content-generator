service: twitter-content-generator

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}

layers:
  shared:
    path: src/nodejs
    name: twitter-content-gen-shared
    description: Shared services layer for Twitter Content Generator
    compatibleRuntimes:
      - nodejs18.x
    retain: false
    package:
      include:
        - src/nodejs

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild

package:
  individually: true
  
functions:

  # --- File Management --- #

  getFiles:
    handler: src/handlers/FileHandler.getFilesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/files
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  uploadFile:
    handler: src/handlers/FileHandler.uploadFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/files
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  deleteFile:
    handler: src/handlers/FileHandler.deleteFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/files
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  # --- Insights --- #

  getInsights:
    handler: src/handlers/InsightsHandler.getInsightsHandler
    events:
      - http:
        path: /api/insights
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - !Ref SharedLambdaLayer

  getDashboardInsights:
    handler: src/handlers/InsightsHandler.getDashboardInsightsHandler
    events:
      - http:
        path: /api/insights/dashboard
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    layers:
      - !Ref SharedLambdaLayer
  
  getInsightsForFile:
    handler: src/handlers/InsightsHandler.getInsightsForFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/insights/{fileId}
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  # --- Content Generation --- #

  generateReplies:
    handler: src/handlers/ContentGenerationHandler.generateRepliesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/content/generate/replies
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
    
  generateTweets:
    handler: src/handlers/ContentGenerationHandler.generateTweetsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/content/generate/tweets
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  generateLongFormThreads:
    handler: src/handlers/ContentGenerationHandler.generateLongFormThreadsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/content/generate/threads
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  generateImageVideoIdeas:
    handler: src/handlers/ContentGenerationHandler.generateImageVideoIdeasHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/content/generate/image-video
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
  
  # --- Feedback --- #

  getFeedback:
    handler: src/handlers/FeedbackHandler.getFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/feedback
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  submitFeedback:
    handler: src/handlers/FeedbackHandler.submitFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/feedback
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  updateFeedback:
    handler: src/handlers/FeedbackHandler.updateFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/feedback
        method: patch
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  deleteFeedback:
    handler: src/handlers/FeedbackHandler.deleteFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/feedback
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  # --- Avatars --- #

  getAvatars:
    handler: src/handlers/AvatarHandler.getAvatarsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/avatars
        method: get
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  createAvatar:
    handler: src/handlers/AvatarHandler.createAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/avatars
        method: post
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  updateAvatar:
    handler: src/handlers/AvatarHandler.updateAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/avatars
        method: patch
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer

  deleteAvatar:
    handler: src/handlers/AvatarHandler.deleteAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
        path: /api/avatars
        method: delete
        authorizer:
          type: COGNITO_USER_POOLS
          authorizerId:
            Ref: ApiGatewayAuthorizer
      
resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: twitter-content-gen-userpool
        MfaConfiguration: OFF
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: True
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: twitter-content-gen-userpool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: twitter-csv-files-bucket
    UserDataTable:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: twitter_content_gen
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: MySQL
        EngineVersion: "5.7"
        MasterUsername: admin         # replace later
        MasterUserPassword: admin123  # replace later
        PubliclyAccessible: true
        StorageType: gp2
        MultiAZ: false
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: twitter-content-gen-authorizermethod.request.header.Authorization
        IdentitySource: 
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn
    # SharedLayer:
    #   Type: AWS::Lambda::LayerVersion
    #   Properties:
    #     LayerName: twitter-content-gen-shared-layer-${sls:stage}
    #     Description: Shared services layer for Twitter Content Generator
    #     Content: ./src/nodejs
    #     CompatibleRuntimes:
    #       - nodejs18.x
    #     RetentionPolicy: Retain

outputs:
  SHARED_LAYER_ARN:
    Value:
      Fn::GetAtt:
        - SharedLambdaLayer
        - Arn
    Export:
      Name: SHARED_LAYER_ARN
  DB_HOST:
    Value:
      Fn::GetAtt:
        - UserDataTable
        - Endpoint.Address
    Export:
      Name: DB_HOST
  DB_PORT:
    Value:
      Fn::GetAtt:
        - UserDataTable
        - Endpoint.Port
    Export:
      Name: DB_PORT
  DB_NAME:
    Value: twitter_content_gen
    Export:
      Name: DB_NAME
  DB_USERNAME:
    Value: admin
    Export:
      Name: DB_USERNAME
  DB_PASSWORD:
    Value: admin123
    Export:
      Name: DB_PASSWORD

useDotenv: true
custom:
  dotenv:
    include:
      - DB_HOST
      - DB_PORT
      - DB_NAME
      - DB_USERNAME
      - DB_PASSWORD
      - OPENAI_API_KEY