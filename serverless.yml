service: twitter-content-generator

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  environment:
    REACT_APP_OPENAI_API_KEY: ${env:REACT_APP_OPENAI_API_KEY}
    REACT_APP_USER_POOL_REGION: ${env:REACT_APP_USER_POOL_REGION}
    REACT_APP_USER_POOL_ID: ${env:REACT_APP_USER_POOL_ID}
    REACT_APP_USER_POOL_CLIENT_ID: ${env:REACT_APP_USER_POOL_CLIENT_ID}
    REACT_APP_ALLOWED_ORIGINS: ${env:REACT_APP_ALLOWED_ORIGINS}
    REACT_APP_S3_BUCKET_NAME:
      'Fn::ImportValue': S3_BUCKET_NAME
    REACT_APP_S3_BUCKET_REGION:
      'Fn::ImportValue': S3_BUCKET_REGION
    REACT_APP_DB_HOST:
      'Fn::ImportValue': DB_HOST
    REACT_APP_DB_PORT:
      'Fn::ImportValue': DB_PORT
    REACT_APP_DB_NAME:
      'Fn::ImportValue': DB_NAME
    REACT_APP_DB_USERNAME:
      'Fn::ImportValue': DB_USERNAME
    REACT_APP_DB_PASSWORD:
      'Fn::ImportValue': DB_PASSWORD

layers:
  shared:
    path: src/nodejs
    name: twitter-content-gen-shared
    description: Shared services layer for Twitter Content Generator
    compatibleRuntimes:
      - nodejs18.x
    retain: false

plugins:
  - serverless-dotenv-plugin
  - serverless-esbuild

package:
  individually: true
  
functions:

  # --- File Management --- #

  getFiles:
    handler: src/handlers/FileHandler.getFilesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/files
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  createFile:
    handler: src/handlers/FileHandler.createFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/files
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
              
  deleteFile:
    handler: src/handlers/FileHandler.deleteFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/files
          method: delete
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  # --- Insights --- #

  getInsights:
    handler: src/handlers/InsightsHandler.getInsightsHandler
    events:
      - http:
          path: /api/insights
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
    layers:
      - !Ref SharedLambdaLayer

  getDashboardInsights:
    handler: src/handlers/InsightsHandler.getDashboardInsightsHandler
    events:
      - http:
          path: /api/insights/dashboard
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
    layers:
      - !Ref SharedLambdaLayer
  
  getInsightsForFile:
    handler: src/handlers/InsightsHandler.getInsightsForFileHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/insights/{fileId}
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  # --- Content Generation --- #

  getGeneratedContent:
    handler: src/handlers/ContentGenerationHandler.getGeneratedContentHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/content/generate
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  generateReplies:
    handler: src/handlers/ContentGenerationHandler.generateRepliesHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/content/generate/replies
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
    
  generateTweets:
    handler: src/handlers/ContentGenerationHandler.generateTweetsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/content/generate/tweets
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  generateLongFormThreads:
    handler: src/handlers/ContentGenerationHandler.generateLongFormThreadsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/content/generate/threads
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  generateImageVideoIdeas:
    handler: src/handlers/ContentGenerationHandler.generateImageVideoIdeasHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/content/generate/image-video
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub
  
  # --- Feedback --- #

  generateUserContentFeedback:
    handler: src/handlers/FeedbackHandler.generateUserContentFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback/content/generate
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  generateNewContentFromFeedback:
    handler: src/handlers/FeedbackHandler.generateNewContentFromFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback/content/regenerate
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  getFeedback:
    handler: src/handlers/FeedbackHandler.getFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  submitFeedback:
    handler: src/handlers/FeedbackHandler.submitFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  updateFeedback:
    handler: src/handlers/FeedbackHandler.updateFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback
          method: patch
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  deleteFeedback:
    handler: src/handlers/FeedbackHandler.deleteFeedbackHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/feedback
          method: delete
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  # --- Avatars --- #

  getAvatars:
    handler: src/handlers/AvatarHandler.getAvatarsHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/avatars
          method: get
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  createAvatar:
    handler: src/handlers/AvatarHandler.createAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/avatars
          method: post
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  updateAvatar:
    handler: src/handlers/AvatarHandler.updateAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/avatars
          method: patch
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

  deleteAvatar:
    handler: src/handlers/AvatarHandler.deleteAvatarHandler
    layers:
      - !Ref SharedLambdaLayer
    events:
      - http:
          path: /api/avatars
          method: delete
          cors:
            origin:
              - 'http://localhost:3000'
            allowCredentials: true
            methods: 'ANY'
            headers: '*'
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            claims:
              - email
              - sub

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: twitter-content-gen-userpool
        MfaConfiguration: OFF
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: True
            RequireLowercase: True
            RequireNumbers: True
            RequireSymbols: False
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: twitter-content-gen-userpool-client
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: twitter-content-gen-identitypool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
              - CognitoAuthRole
              - Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                ForAnyValue:StringLike:
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: CognitoAuthorizedPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    Fn::Sub: arn:aws:s3:::twitter-csv-files-bucket/*
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: twitter-csv-files-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: ["GET", "PUT", "POST", "DELETE"]
              AllowedOrigins: ["*"]
              MaxAge: 3000
    UserDataTable:
      Type: AWS::RDS::DBInstance
      Properties:
        DBName: twitter_content_gen
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: MySQL
        EngineVersion: "5.7"
        MasterUsername: admin         # replace later
        MasterUserPassword: admin123  # replace later
        PubliclyAccessible: true
        StorageType: gp2
        MultiAZ: false
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: twitter-content-gen-authorizermethod.request.header.Authorization
        IdentitySource: 
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt:
              - CognitoUserPool
              - Arn

outputs:
  SHARED_LAYER_ARN:
    Value:
      Fn::GetAtt:
        - SharedLambdaLayer
        - Arn
    Export:
      Name: SHARED_LAYER_ARN
  DB_HOST:
    Value:
      Fn::GetAtt:
        - UserDataTable
        - Endpoint.Address
    Export:
      Name: DB_HOST
  DB_PORT:
    Value:
      Fn::GetAtt:
        - UserDataTable
        - Endpoint.Port
    Export:
      Name: DB_PORT
  DB_NAME:
    Value: twitter_content_gen
    Export:
      Name: DB_NAME
  DB_USERNAME:
    Value: admin
    Export:
      Name: DB_USERNAME
  DB_PASSWORD:
    Value: admin123
    Export:
      Name: DB_PASSWORD
  S3_BUCKET_NAME:
    Value: twitter-csv-files-bucket
    Export:
      Name: S3_BUCKET_NAME
  S3_BUCKET_REGION:
    Value: !Ref AWS::Region
    Export:
      Name: S3_BUCKET_REGION

useDotenv: true
custom:
  dotenv:
    include:
      - REACT_APP_DB_HOST
      - REACT_APP_DB_PORT
      - REACT_APP_DB_NAME
      - REACT_APP_DB_USERNAME
      - REACT_APP_DB_PASSWORD
      - REACT_APP_OPENAI_API_KEY
      - REACT_APP_USER_POOL_REGION
      - REACT_APP_USER_POOL_ID
      - REACT_APP_USER_POOL_CLIENT_ID
      - REACT_APP_ALLOWED_ORIGINS
      - REACT_APP_S3_BUCKET_NAME
      - REACT_APP_S3_BUCKET_REGION